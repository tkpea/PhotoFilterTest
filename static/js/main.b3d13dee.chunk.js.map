{"version":3,"sources":["library/imageFilter/brightnessAdjs.ts","library/imageFilter/colourTints.ts","library/imageFilter/lineGenerators.ts","library/imageFilter/helpers.ts","library/imageFilter/noiseGenerators.ts","library/imageFilter/specksGenerators.ts","library/imageFilter/filters.ts","library/imageFilter/offsetFilters.ts","library/imageFilter/index.ts","library/imageFilter/Math/Ramdom.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["i","addition2","getRandomNumber","min","max","Math","floor","random","addition1","EFilterType","applyFilter","filter","imageData","a","imgdata","randomnumber","data","length","brightnessAdj","darkify","incbrightness","incbrightness2","invert","pixelBlue","satAdj","ocean","imgData","colourTints","vintage","perfume","serenity","warmth","neue","sunset","wood","lix","ryo","bluescale","avg","solange","evening","crimson","coral","pinkAura","haze","coolTwilight","blues","horizon","mellow","solangeDark","solangeGrey","zapt","eon","aeon","phase","lemon","frontward","purplescale","radio","twenties","greyscale","grime","redgreyscale","greengreyscale","rosetint","greenDiagonalLines","inc","lineGen","diagonalLines","horizontalLines","extremeOffsetBlue","undefined","offsets","extremeOffsetGreen","offsetGreen","extraOffsetBlue","extraOffsetRed","extraOffsetGreen","offset","console","log","offsetBlue","extremeOffsetRed","tealMinNoise","randomcolor1","randomcolor2","randomcolor3","noiseGen","darkPurpleMinNoise","pinkMinNoise","matrix","cosmic","minNoise","redMinNoise","matrix2","greenMedNoise","greenMinNoise","blueMinNoise","purpleMinNoise","retroviolet","randomNumber","specksGen","yellowCasino","inc2","specks","specksRedscale","eclectic","greenSpecks","casino","filterImagePath","path","Promise","resolve","reject","image","Image","src","onload","userImgElement","img","canvas","document","createElement","width","height","ctx","getContext","drawImage","toDataURL","toBlob","b","getImageData","imageElementToCanvas","newImgData","putImageData","filterImageElement","onerror","getFilterTypes","obj","results","Object","keys","k","Number","isNaN","type","push","RandomRange","App","useState","paths","setPaths","filterdImagePaths","setFilterdImagePaths","filters","isLoading","setIsLoading","useEffect","imageNum","count","randoms","tmp","includes","UnduplicateRandom","map","num","String","padStart","initialImage","newImagePath","value","newPath","className","placeholder","onChange","event","parseInt","target","index","imagePath","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b3d13dee.chunk.js","sourcesContent":["import { getRandomNumber } from './helpers'\n\nlet i\n// let addition1\nlet addition2\n// let addition\n\nconst darkifyImgData = (imgdata: ImageData) => {\n  const brightnessAdj = 20\n  for (i = 0; i < imgdata.data.length; i += 4) {\n    imgdata.data[i] -= brightnessAdj\n    imgdata.data[i + 1] -= brightnessAdj\n    imgdata.data[i + 2] -= brightnessAdj\n  }\n  return imgdata\n}\n\nconst incbrightnessImgData = (imgdata: ImageData) => {\n  const brightnessAdj = 50\n  for (i = 0; i < imgdata.data.length; i += 4) {\n    imgdata.data[i] += brightnessAdj\n    imgdata.data[i + 1] += brightnessAdj\n    imgdata.data[i + 2] += brightnessAdj\n  }\n  return imgdata\n}\n\nconst incbrightnessTwoImgData = (imgdata: ImageData) => {\n  const brightnessAdj = 80\n  for (i = 0; i < imgdata.data.length; i += 4) {\n    imgdata.data[i] += brightnessAdj\n    imgdata.data[i + 1] += brightnessAdj\n    imgdata.data[i + 2] += brightnessAdj\n  }\n  return imgdata\n}\n\nconst invertImgData = (imgdata: ImageData) => {\n  for (i = 0; i < imgdata.data.length; i += 4) {\n    imgdata.data[i] = 255 - imgdata.data[i]\n    imgdata.data[i + 1] = 255 - imgdata.data[i + 1]\n    imgdata.data[i + 2] = 255 - imgdata.data[i + 2]\n  }\n  return imgdata\n}\n\nconst satAdjImgData = (imgdata: ImageData) => {\n  const satAdj = 150\n  for (i = 0; i < imgdata.data.length; i += 4) {\n    imgdata.data[i] -= satAdj\n    imgdata.data[i + 1] -= satAdj\n    imgdata.data[i + 2] -= satAdj\n  }\n  return imgdata\n}\n\n// an experimental function that is used for the testing of image filtering.\nconst a = (imgdata: ImageData) => {\n  let randomnumber = 0\n\n  for (i = 0; i < imgdata.data.length; i += 4) {\n    randomnumber = getRandomNumber(0, 200)\n    const addition = 0\n    if (randomnumber > 0 && randomnumber < 50) {\n      // addition1 = 0\n      addition2 = 30\n    } else if (randomnumber > 49 && randomnumber < 100) {\n      // addition1 = 100\n      addition2 = 90\n    } else {\n      // addition1 = 70\n      addition2 = 10\n    }\n\n    if (imgdata.data[i] - addition > 255) {\n      imgdata.data[i] -= addition\n    } else {\n      imgdata.data[i] += addition\n    }\n\n    if (imgdata.data[i + 1] + addition > 255) {\n      imgdata.data[i + 1] -= addition2\n    } else {\n      imgdata.data[i + 2] += addition2\n    }\n  }\n  return imgdata\n}\n\nconst pixelBlueImgData = (imgdata: ImageData) => {\n  let randomnumber = 0\n\n  for (i = 0; i < imgdata.data.length; i += 4) {\n    randomnumber = getRandomNumber(0, 200)\n    const addition = 0\n    if (randomnumber > 0 && randomnumber < 50) {\n      // addition1 = 0\n      addition2 = 30\n    } else if (randomnumber > 49 && randomnumber < 100) {\n      // addition1 = 100\n      addition2 = 90\n    } else {\n      // addition1 = 70\n      addition2 = 10\n    }\n\n    if (imgdata.data[i] - addition > 255) {\n      imgdata.data[i] -= addition\n    } else {\n      imgdata.data[i] += addition\n    }\n\n    if (imgdata.data[i + 1] + addition > 255) {\n      imgdata.data[i + 1] -= addition2\n    } else {\n      imgdata.data[i + 2] += addition2\n    }\n  }\n  return imgdata\n}\n\nexport {\n  satAdjImgData,\n  incbrightnessImgData,\n  incbrightnessTwoImgData,\n  darkifyImgData,\n  invertImgData,\n  a,\n  pixelBlueImgData\n}\n","import { getRandomNumber } from './helpers'\n\nlet i\n\nconst lemonImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i + 1] = imgData.data[i] + 50\n  }\n  return imgData\n}\n\nconst coralImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i + 2] = imgData.data[i + 1] + 50\n  }\n  return imgData\n}\n\nconst frontwardImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] = imgData.data[i + 2]\n    imgData.data[i + 2] = imgData.data[i + 1] + 50\n  }\n  return imgData\n}\n\nconst vintageImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] += 120\n    imgData.data[i + 1] += 70\n    imgData.data[i + 2] += 13\n  }\n\n  return imgData\n}\n\nconst perfumeImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] += 80\n    imgData.data[i + 1] += 40\n    imgData.data[i + 2] += 120\n  }\n  return imgData\n}\n\nconst serenityImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] += 10\n    imgData.data[i + 1] += 40\n    imgData.data[i + 2] += 90\n  }\n  return imgData\n}\n\nconst pinkAuraImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] += 90\n    imgData.data[i + 1] += 10\n    imgData.data[i + 2] += 90\n  }\n  return imgData\n}\n\nconst hazeImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] += 90\n    imgData.data[i + 1] += 90\n    imgData.data[i + 2] += 10\n  }\n  return imgData\n}\n\nconst mellowImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i + 2] = 120 - imgData.data[i + 2]\n  }\n  return imgData\n}\n\nconst solangeDarkImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] = 200 - imgData.data[i]\n\n    // imgData.data[i + 1] = 255 - imgData.data[i + 1];\n    // imgData.data[i + 2] = 255 - imgData.data[i + 2];\n  }\n  return imgData\n}\n\nconst zaptImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    // imgData.data[i] = 255 - imgData.data[i];\n    imgData.data[i + 1] = 255 - imgData.data[i + 1]\n    // imgData.data[i + 2] = 255 - imgData.data[i + 2];\n  }\n  return imgData\n}\n\nconst neueImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i + 2] = 255 - imgData.data[i + 2]\n  }\n  return imgData\n}\n\nconst eonImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i + 1] = 120 - imgData.data[i + 1]\n    imgData.data[i + 2] = 100 - imgData.data[i + 2]\n  }\n  return imgData\n}\n\nconst aeonImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i + 1] = 60 - imgData.data[i + 1]\n    imgData.data[i + 2] = 100 - imgData.data[i + 2]\n  }\n  return imgData\n}\n\nconst rosetintImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg + 80\n    imgData.data[i + 1] = avg + 20\n    imgData.data[i + 2] = avg + 31\n  }\n  return imgData\n}\n\nconst slateImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg + 4\n    imgData.data[i + 1] = avg + 3\n    imgData.data[i + 2] = avg + 12\n  }\n  return imgData\n}\n\nconst purplescaleImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg + 90\n    imgData.data[i + 1] = avg + 40\n    imgData.data[i + 2] = avg + 80\n  }\n  return imgData\n}\n\nconst radioImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg + 5\n    imgData.data[i + 1] = avg + 40\n    imgData.data[i + 2] = avg + 20\n  }\n  return imgData\n}\n\nconst twentiesImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg + 18\n    imgData.data[i + 1] = avg + 12\n    imgData.data[i + 2] = avg + 20\n  }\n  return imgData\n}\n\nconst oceanImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] += 10\n    imgData.data[i + 1] += 20\n    imgData.data[i + 2] += 90\n  }\n  return imgData\n}\n\nconst greyscaleImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg\n    imgData.data[i + 1] = avg\n    imgData.data[i + 2] = avg\n  }\n  return imgData\n}\n\nconst redgreyscaleImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg + 100\n    imgData.data[i + 1] = avg + 40\n    imgData.data[i + 2] = avg + 20\n  }\n  return imgData\n}\n\nconst greengreyscaleImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg + 20\n    imgData.data[i + 1] = avg + 70\n    imgData.data[i + 2] = avg + 20\n  }\n  return imgData\n}\n\nconst warmth = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] = imgData.data[i] + 10\n    imgData.data[i + 1] = imgData.data[i + 1] + 18\n  }\n  return imgData\n}\n\nconst crimson = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] = imgData.data[i] + 20\n    imgData.data[i + 1] = imgData.data[i + 2] + 20\n  }\n  return imgData\n}\n\nconst phase = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] = imgData.data[i] + getRandomNumber(10, 20)\n    imgData.data[i + 1] = imgData.data[i + 2] + getRandomNumber(10, 20)\n\n    imgData.data[i + 2] = imgData.data[i + 2] + getRandomNumber(10, 20)\n  }\n  return imgData\n}\n\nconst grime = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i + 1] = imgData.data[i] + 5\n    imgData.data[i] = imgData.data[i] + 1\n  }\n  return imgData\n}\n\nconst eveningImgData = (imgData: ImageData) => {\n  const satAdj = 60\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] -= satAdj\n    imgData.data[i + 1] -= satAdj\n    imgData.data[i + 2] -= satAdj\n  }\n  return imgData\n}\n\nconst sunset = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i + 1] = imgData.data[i] + 50\n    imgData.data[i + 2] = imgData.data[i + 2] + 12\n  }\n  return imgData\n}\n\nconst wood = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] = imgData.data[i] + 30\n    imgData.data[i + 1] = imgData.data[i + 1] + 12\n  }\n  return imgData\n}\n\nconst lixConv = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] = 255 - imgData.data[i]\n    imgData.data[i + 1] = 255 - imgData.data[i + 1]\n  }\n  return imgData\n}\n\nconst ryoConv = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] = 255 - imgData.data[i]\n    imgData.data[i + 2] = 255 - imgData.data[i + 2]\n  }\n  return imgData\n}\n\nconst blueGreyscaleImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg + 20\n    imgData.data[i + 1] = avg + 30\n    imgData.data[i + 2] = avg + 60\n  }\n  return imgData\n}\n\nconst solangeImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] = 255 - imgData.data[i]\n  }\n  return imgData\n}\n\nconst solangeGreyImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] = imgData.data[i + 2]\n    imgData.data[i + 1] = imgData.data[i + 1]\n    imgData.data[i + 2] = imgData.data[i]\n  }\n  return imgData\n}\n\nconst coolTwilightImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i + 1] = 255 - imgData.data[i + 1]\n  }\n  return imgData\n}\n\nconst bluesImgData = (imgData: ImageData) => {\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i + 2] = 255 - imgData.data[i + 2]\n  }\n  return imgData\n}\n\nconst horizonImgData = (imgData: ImageData) => {\n  const satAdj = 150\n  for (i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] -= satAdj\n    imgData.data[i + 1] -= satAdj\n    imgData.data[i + 2] -= satAdj\n  }\n  return imgData\n}\n\nexport {\n  bluesImgData,\n  coolTwilightImgData,\n  blueGreyscaleImgData,\n  aeonImgData,\n  solangeGreyImgData,\n  solangeImgData,\n  ryoConv,\n  lixConv,\n  wood,\n  sunset,\n  lemonImgData,\n  coralImgData,\n  frontwardImgData,\n  greyscaleImgData,\n  perfumeImgData,\n  vintageImgData,\n  serenityImgData,\n  slateImgData,\n  warmth,\n  redgreyscaleImgData,\n  grime,\n  phase,\n  crimson,\n  greengreyscaleImgData,\n  oceanImgData,\n  radioImgData,\n  neueImgData,\n  eonImgData,\n  zaptImgData,\n  solangeDarkImgData,\n  pinkAuraImgData,\n  hazeImgData,\n  mellowImgData,\n  eveningImgData,\n  horizonImgData,\n  twentiesImgData,\n  rosetintImgData,\n  purplescaleImgData\n}\n","\nlet i\n\nfunction addHorizontalLineImgData (imgData: ImageData): ImageData {\n  let inc = 0\n\n  for (i = 0; i < imgData.data.length; i += 4) {\n    inc += 1\n    if (inc > 255) {\n      inc = 0\n    }\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg + inc\n    imgData.data[i + 1] = avg + 70\n    imgData.data[i + 2] = avg + 20\n  }\n  return imgData\n};\n\nconst addDiagonalLinesImgData = (imgData: ImageData) => {\n  let inc = 0\n  for (i = 0; i < imgData.data.length; i += 4) {\n    inc += 20\n    if (inc > 255) {\n      inc = 0\n    }\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg + inc\n    imgData.data[i + 1] = avg + 70\n    imgData.data[i + 2] = avg + 20\n  }\n  return imgData\n}\n\nconst addGreenDiagonalLinesImgData = (imgData: ImageData) => {\n  let inc = 0\n  for (i = 0; i < imgData.data.length; i += 4) {\n    inc += 20\n    if (inc > 255) {\n      inc = 0\n    }\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg + 5\n    imgData.data[i + 1] = avg + inc\n    imgData.data[i + 2] = avg + 20\n  }\n  return imgData\n}\n\nexport {\n  addDiagonalLinesImgData,\n  addGreenDiagonalLinesImgData,\n  addHorizontalLineImgData\n}\n","const getRandomNumber = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport { getRandomNumber }\n","import { getRandomNumber } from './helpers'\n\n// let addition\n// let addition1\nlet addition2\n\nconst greenmedNoiseImgData = (imgData:ImageData):ImageData => {\n  // const rand = (0.5 - Math.random()) * 9;\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const randomcolor1 = 0.6 + Math.random() * 0.5\n\n    const randomcolor2 = 0.6 + Math.random() * 0.5\n\n    const randomcolor3 = 0.6 + Math.random() * 0.5\n\n    imgData.data[i] = imgData.data[i + 1] * 0.5 * randomcolor1\n    imgData.data[i + 1] = imgData.data[i + 2] * 0.99 * randomcolor2\n\n    imgData.data[i + 2] = imgData.data[i] * 0.99 * randomcolor3\n  }\n  return imgData\n}\n\nconst darkPurpleMinNoiseImgData = (imgData: ImageData):ImageData => {\n  // const rand = (0.5 - Math.random()) * 9\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const randomcolor1 = 0.6 + Math.random() * 0.5\n\n    const randomcolor2 = 0.6 + Math.random() * 0.5\n\n    const randomcolor3 = 0.6 + Math.random() * 0.5\n\n    imgData.data[i] = imgData.data[i] * 0.5 * randomcolor1\n    imgData.data[i + 1] = imgData.data[i + 1] * 0.3 * randomcolor2\n\n    imgData.data[i + 2] = imgData.data[i + 2] * 0.99 * randomcolor3\n  }\n  return imgData\n}\n\nconst tealMinNoiseImgData = (imgData: ImageData):ImageData => {\n  // const rand = (0.5 - Math.random()) * 1\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const randomcolor1 = 0.6 + Math.random() * 0.1\n\n    const randomcolor2 = 0.6 + Math.random() * 0.5\n\n    const randomcolor3 = 0.6 + Math.random() * 0.5\n\n    imgData.data[i] = imgData.data[i] * 0.99 * randomcolor1\n    imgData.data[i + 1] = imgData.data[i + 1] * 0.99 * randomcolor2\n\n    imgData.data[i + 2] = imgData.data[i + 2] * 0.99 * randomcolor3\n  }\n  return imgData\n}\n\nconst purpleMinNoiseImgData = (imgData: ImageData):ImageData => {\n  // const rand = (0.5 - Math.random()) * 1\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const randomcolor1 = 0.6 + Math.random() * 0.5\n\n    const randomcolor2 = 0.6 + Math.random() * 0.2\n\n    const randomcolor3 = 0.6 + Math.random() * 0.8\n\n    imgData.data[i] = imgData.data[i] * 0.99 * randomcolor1\n    imgData.data[i + 1] = imgData.data[i + 1] * 0.99 * randomcolor2\n\n    imgData.data[i + 2] = imgData.data[i + 2] * 0.99 * randomcolor3\n  }\n  return imgData\n}\n\nconst blueMinNoiseImgData = (imgData: ImageData):ImageData => {\n  // const rand = (0.5 - Math.random()) * 1\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const randomcolor1 = 0.6 + Math.random() * 0.1\n\n    const randomcolor2 = 0.6 + Math.random() * 0.2\n\n    const randomcolor3 = 0.6 + Math.random() * 0.7\n\n    imgData.data[i] = imgData.data[i] * 0.99 * randomcolor1\n    imgData.data[i + 1] = imgData.data[i + 1] * 0.99 * randomcolor2\n\n    imgData.data[i + 2] = imgData.data[i + 2] * 0.99 * randomcolor3\n  }\n  return imgData\n}\n\nconst greenMinNoiseImgData = (imgData: ImageData):ImageData => {\n  // const rand = (0.5 - Math.random()) * 1\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const randomcolor1 = 0.6 + Math.random() * 0.1\n\n    const randomcolor2 = 0.6 + Math.random() * 0.5\n\n    const randomcolor3 = 0.6 + Math.random() * 0.4\n\n    imgData.data[i] = imgData.data[i] * 0.99 * randomcolor1\n    imgData.data[i + 1] = imgData.data[i + 1] * 0.99 * randomcolor2\n\n    imgData.data[i + 2] = imgData.data[i + 2] * 0.99 * randomcolor3\n  }\n  return imgData\n}\n\nconst pinkMinNoiseImgData = (imgData: ImageData):ImageData => {\n  // const rand = (0.5 - Math.random()) * 1\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const randomcolor1 = 0.6 + Math.random() * 0.6\n\n    const randomcolor2 = 0.6 + Math.random() * 0.1\n\n    const randomcolor3 = 0.6 + Math.random() * 0.4\n\n    imgData.data[i] = imgData.data[i] * 0.99 * randomcolor1\n    imgData.data[i + 1] = imgData.data[i + 1] * 0.99 * randomcolor2\n\n    imgData.data[i + 2] = imgData.data[i + 2] * 0.99 * randomcolor3\n  }\n  return imgData\n}\n\nconst matrixImgData = (imgData: ImageData):ImageData => {\n  let randomnumber\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    randomnumber = getRandomNumber(0, 200)\n    const addition = 0\n    if (randomnumber > 0 && randomnumber < 50) {\n      // addition1 = 20\n      addition2 = 30\n    } else if (randomnumber > 49 && randomnumber < 100) {\n      // addition1 = 10\n      addition2 = 90\n    } else {\n      // addition1 = 30\n      addition2 = 10\n    }\n\n    if (imgData.data[i] - addition > 255) {\n      imgData.data[i] -= addition\n    } else {\n      imgData.data[i] += addition\n    }\n\n    if (imgData.data[i + 1] + addition > 255) {\n      imgData.data[i + 1] -= addition2\n    } else {\n      imgData.data[i + 1] += addition2\n    }\n  }\n  return imgData\n}\n\nconst matrix2 = (imgData: ImageData):ImageData => {\n  let randomnumber\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    randomnumber = getRandomNumber(0, 200)\n    const addition = 0\n    if (randomnumber > 0 && randomnumber < 50) {\n      // addition1 = 20\n      addition2 = 30\n    } else if (randomnumber > 49 && randomnumber < 100) {\n      // addition1 = 10\n      addition2 = 90\n    } else {\n      // addition1 = 70\n      addition2 = 10\n    }\n\n    if (imgData.data[i] - addition > 255) {\n      imgData.data[i] -= addition\n    } else {\n      imgData.data[i] += addition\n    }\n\n    if (imgData.data[i + 1] + addition > 255) {\n      imgData.data[i + 1] -= addition2\n    } else {\n      imgData.data[i + 1] += addition2\n    }\n  }\n  return imgData\n}\n\nconst cosmicImgData = (imgData: ImageData):ImageData => {\n  let randomnumber = 0\n  const addition = 0\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    randomnumber = getRandomNumber(0, 200)\n    if (randomnumber > 0 && randomnumber < 50) {\n      //   addition1 = 0\n      addition2 = 30\n    } else if (randomnumber > 49 && randomnumber < 100) {\n      //   addition1 = 100\n      addition2 = 90\n    } else {\n    //  addition1 = 70\n      addition2 = 10\n    }\n\n    if (imgData.data[i] - addition > 255) {\n      imgData.data[i] -= addition\n    } else {\n      imgData.data[i] += addition\n    }\n\n    if (imgData.data[i + 1] + addition > 255) {\n      imgData.data[i + 1] -= addition2\n    } else {\n      imgData.data[i + 2] += addition2\n    }\n  }\n  return imgData\n}\n\nconst minNoiseImgData = (imgData: ImageData):ImageData => {\n  // const rand = (0.5 - Math.random()) * 53\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const randomcolor1 = 0.6 + Math.random() * 0.4\n\n    const randomcolor2 = 0.6 + Math.random() * 0.4\n\n    const randomcolor3 = 0.6 + Math.random() * 0.4\n\n    imgData.data[i] = imgData.data[i] * 0.99 * randomcolor1\n    imgData.data[i + 1] = imgData.data[i + 1] * 0.99 * randomcolor2\n\n    imgData.data[i + 2] = imgData.data[i + 2] * 0.99 * randomcolor3\n  }\n  return imgData\n}\n\nconst redMinNoiseImgData = (imgData: ImageData):ImageData => {\n  // const rand = (0.5 - Math.random()) * 1\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const randomcolor1 = 0.6 + Math.random() * 0.6\n\n    const randomcolor2 = 0.6 + Math.random() * 0.4\n\n    const randomcolor3 = 0.6 + Math.random() * 0.4\n\n    imgData.data[i] = imgData.data[i] * 0.99 * randomcolor1\n    imgData.data[i + 1] = imgData.data[i + 1] * 0.99 * randomcolor2\n\n    imgData.data[i + 2] = imgData.data[i + 2] * 0.99 * randomcolor3\n  }\n  return imgData\n}\n\nexport {\n  redMinNoiseImgData,\n  greenmedNoiseImgData,\n  greenMinNoiseImgData,\n  purpleMinNoiseImgData,\n  darkPurpleMinNoiseImgData,\n  tealMinNoiseImgData,\n  cosmicImgData,\n  blueMinNoiseImgData,\n  matrix2,\n  minNoiseImgData,\n  matrixImgData,\n  pinkMinNoiseImgData\n}\n","\nimport { getRandomNumber } from './helpers'\n\nlet addition1\nlet addition2\n\nconst casinoImgData = (imgData: ImageData): ImageData => {\n  let inc = 0\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    inc = getRandomNumber(0, 255)\n    if (inc > 255) {\n      inc = 0\n    }\n\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg + inc\n    imgData.data[i + 1] = avg + 2\n    imgData.data[i + 2] = avg + 5\n  }\n  return imgData\n}\n\nconst yellowCasinoImgData = (imgData: ImageData): ImageData => {\n  let inc = 0\n  let inc2 = 0\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    inc = getRandomNumber(0, 255)\n    inc2 = getRandomNumber(0, 255)\n\n    if (inc > 255) {\n      inc = 0\n    }\n\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg + inc\n    imgData.data[i + 1] = avg + inc2\n    imgData.data[i + 2] = avg + 5\n  }\n\n  return imgData\n}\n\nconst specksImgData = (imgData: ImageData): ImageData => {\n  let inc = 0\n  let inc2 = 0\n  // let inc3 = 0\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    i = getRandomNumber(0, imgData.data.length)\n    inc = getRandomNumber(0, 255)\n    inc2 = getRandomNumber(0, 255)\n    // inc3 = getRandomNumber(0, 255)\n    if (inc > 255) {\n      inc = 0\n    }\n\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n    imgData.data[i] = avg + inc\n    imgData.data[i + 1] = avg + inc2\n    imgData.data[i + 2] = avg + 5\n  }\n  return imgData\n}\n\nconst specksredscaleImgData = (imgData: ImageData): ImageData => {\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const randomNumber = getRandomNumber(0, 100)\n    if (randomNumber > 10 && randomNumber < 13) {\n      imgData.data[i] = 120\n      imgData.data[i + 1] = 120\n      imgData.data[i + 2] = 120\n    }\n    const avg =\n      (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3\n\n    imgData.data[i] = avg + 100\n    imgData.data[i + 1] = avg + 40\n    imgData.data[i + 2] = avg + 20\n  }\n  return imgData\n}\n\nconst noiseCentreImgData = (imgData: ImageData): ImageData => {\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i] += getRandomNumber(0, 100)\n    imgData.data[i + 1] += 20\n    imgData.data[i + 2] += getRandomNumber(0, 255)\n  }\n\n  return imgData\n}\n\nconst greenSpecksImgData = (imgData: ImageData): ImageData => {\n  let randomNumber\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    randomNumber = getRandomNumber(0, 200)\n    // const addition = 0\n    if (randomNumber > 0 && randomNumber < 50) {\n      addition1 = 20\n      addition2 = 30\n    } else if (randomNumber > 49 && randomNumber < 100) {\n      addition1 = 10\n      addition2 = 90\n    } else {\n      addition1 = 30\n      addition2 = 10\n    }\n\n    imgData.data[i] += addition1\n    imgData.data[i + 1] += addition2\n    imgData.data[i + 2] += addition1\n  }\n  return imgData\n}\n\nconst eclecticImgData = (imgData: ImageData): ImageData => {\n  let randomNumber = 0\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    randomNumber = getRandomNumber(0, 200)\n    const addition = 0\n    if (randomNumber > 0 && randomNumber < 50) {\n      addition1 = 20\n      addition2 = 30\n    } else if (randomNumber > 49 && randomNumber < 100) {\n      addition1 = 10\n      addition2 = 90\n    } else {\n      addition1 = 30\n      addition2 = 10\n    }\n\n    if (imgData.data[i] + addition > 255) {\n      imgData.data[i] -= addition\n    } else {\n      imgData.data[i] += addition\n    }\n\n    if (imgData.data[i + 1] + addition > 255) {\n      imgData.data[i + 1] -= addition2\n    } else {\n      imgData.data[i] += addition2\n    }\n  }\n  return imgData\n}\n\nconst retrovioletImgData = (imgData: ImageData): ImageData => {\n  let randomNumber = 0\n\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    randomNumber = getRandomNumber(0, 200)\n\n    let addition1 = 0\n    let addition2 = 0\n    if (randomNumber > 0 && randomNumber < 50) {\n      addition1 = 20\n      addition2 = 30\n    } else if (randomNumber > 49 && randomNumber < 100) {\n      addition1 = 20\n      addition2 = 90\n    } else {\n      addition1 = 10\n      addition2 = 50\n    }\n\n    if (imgData.data[i] - addition1 > 255) {\n      imgData.data[i] -= addition1\n    } else {\n      imgData.data[i] += addition1\n    }\n\n    if (imgData.data[i + 2] + addition2 > 255) {\n      imgData.data[i + 2] -= addition2\n    } else {\n      imgData.data[i + 2] += addition2\n    }\n  }\n  return imgData\n}\n\n// const confetti_imgdata = () => {\n//     for (let i = 0; i < imgData.data.length; i += 4) {\n\n//         let randomNumber = getRandomNumber(0, 200);\n\n//         if (randomNumber > 0 && randomNumber < 10) {\n//             imgData.data[i] = getRandomNumber(0, 255)\n//             imgData.data[i + 1] = getRandomNumber(0, 255)\n//             imgData.data[i + 2] = getRandomNumber(0, 255)\n//         }\n\n//         else {\n//             imgData.data[i] += 10\n//             imgData.data[i + 1] += 20\n//             imgData.data[i + 2] += 90\n//         }\n\n//     }\n//     return imgData;\n// }\n\nexport {\n  casinoImgData,\n  yellowCasinoImgData,\n  retrovioletImgData,\n  eclecticImgData,\n  greenSpecksImgData,\n  specksImgData,\n  specksredscaleImgData,\n  noiseCentreImgData\n}\n","/* eslint-disable no-multi-spaces */\n/* eslint-disable no-unused-vars */\nimport * as brightnessAdj from './brightnessAdjs'\nimport * as colourTints from './colourTints'\nimport * as lineGen from './lineGenerators'\nimport * as offsets from './offsetFilters'\nimport * as noiseGen from './noiseGenerators'\nimport * as specksGen from './specksGenerators'\n\n\n\n\nexport enum EFilterType {\n    a,                  // brightnessAdj.a\n    darkify,            // brightnessAdj.darkifyImgData\n    incbrightness,      // brightnessAdj.incbrightnessImgData\n    incbrightness2,     // brightnessAdj.incbrightnessTwoImgData\n    invert,             // brightnessAdj.invertImgData\n    pixelBlue,          // brightnessAdj.pixelBlueImgData\n    satAdj,             // brightnessAdj.satAdjImgData\n    ocean,              // colourTints.oceanImgData\n    vintage,            // colourTints.vintageImgData\n    perfume,            // colourTints.perfumeImgData\n    serenity,           // colourTints.serenityImgData\n    warmth,             // colourTints.warmth\n    neue,               // colourTints.neueImgData\n    sunset,             // colourTints.sunset\n    wood,               // colourTints.wood\n    lix,                // colourTints.lixConv\n    ryo,                // colourTints.ryoConv\n    bluescale,          // colourTints.blueGreyscaleImgData\n    solange,            // colourTints.solangeImgData\n    evening,            // colourTints.eveningImgData\n    crimson,            // colourTints.crimson\n    coral,              // colourTints.coralImgData\n    pinkAura,           // colourTints.pinkAuraImgData\n    haze,               // colourTints.hazeImgData\n    coolTwilight,       // colourTints.coolTwilightImgData\n    blues,              // colourTints.bluesImgData\n    horizon,            // colourTints.horizonImgData\n    mellow,             // colourTints.mellowImgData\n    solangeDark,        // colourTints.solangeDarkImgData\n    solangeGrey,        // colourTints.solangeGreyImgData\n    zapt,               // colourTints.zaptImgData\n    eon,                // colourTints.eonImgData\n    aeon,               // colourTints.aeonImgData\n    phase,              // colourTints.phase\n    lemon,              // colourTints.lemonImgData\n    frontward,          // colourTints.frontwardImgData\n    purplescale,        // colourTints.purplescaleImgData\n    radio,              // colourTints.radioImgData\n    twenties,           // colourTints.twentiesImgData\n    greyscale,          // colourTints.greyscaleImgData\n    grime,              // colourTints.grime\n    redgreyscale,       // colourTints.redgreyscaleImgData\n    greengreyscale,     // colourTints.greengreyscaleImgData\n    rosetint,           // colourTints.rosetintImgData\n    greenDiagonalLines, // lineGen.addGreenDiagonalLinesImgData\n    diagonalLines,      // lineGen.addDiagonalLinesImgData\n    horizontalLines,    // lineGen.addHorizontalLineImgData\n    extremeOffsetBlue,  // offsets.extremeOffsetBlue\n    extremeOffsetGreen, // offsets.extremeOffsetGreen\n    offsetGreen,        // offsets.offsetGreenImgData\n    extraOffsetBlue,    // offsets.extraOffsetBlue\n    extraOffsetRed,     // offsets.extraOffsetRed\n    extraOffsetGreen,   // offsets.extraOffsetGreen\n    offset,             // offsets.offset\n    offsetBlue,         // offsets.offsetBlueImgData\n    extremeOffsetRed,   // offsets.extremeOffsetRed\n    tealMinNoise,       // noiseGen.tealMinNoiseImgData\n    darkPurpleMinNoise, // noiseGen.darkPurpleMinNoiseImgData\n    pinkMinNoise,       // noiseGen.pinkMinNoiseImgData\n    matrix,             // noiseGen.matrixImgData\n    cosmic,             // noiseGen.cosmicImgData\n    minNoise,           // noiseGen.minNoiseImgData\n    redMinNoise,        // noiseGen.redMinNoiseImgData\n    matrix2,            // noiseGen.matrix2\n    greenMedNoise,      // noiseGen.greenMedNoiseImgData\n    greenMinNoise,      // noiseGen.greenMinNoiseImgData\n    blueMinNoise,       // noiseGen.blueMinNoiseImgData\n    purpleMinNoise,     // noiseGen.purpleMinNoiseImgData\n    retroviolet,        // specksGen.retrovioletImgData\n    yellowCasino,       // specksGen.yellowCasinoImgData\n    specks,             // specksGen.specksImgData\n    specksRedscale,     // specksGen.specksredscaleImgData\n    eclectic,           // specksGen.eclecticImgData\n    greenSpecks,        // specksGen.greenSpecksImgData\n    casino,             // specksGen.casinoImgData\n}\n\nexport function applyFilter (filter:EFilterType, imageData: ImageData):ImageData {\n\n  switch (filter) {\n    case EFilterType.a:\n      return brightnessAdj.a(imageData)\n    case EFilterType.darkify:\n      return brightnessAdj.darkifyImgData(imageData)\n    case EFilterType.incbrightness:\n      return brightnessAdj.incbrightnessImgData(imageData)\n    case EFilterType.incbrightness2:\n      return brightnessAdj.incbrightnessTwoImgData(imageData)\n    case EFilterType.invert:\n      return brightnessAdj.invertImgData(imageData)\n    case EFilterType.pixelBlue:\n      return  brightnessAdj.pixelBlueImgData(imageData)\n    case EFilterType.satAdj:\n      return brightnessAdj.satAdjImgData(imageData)\n    case EFilterType.ocean:\n      return colourTints.oceanImgData(imageData)\n    case EFilterType.vintage:\n      return colourTints.vintageImgData(imageData)\n    case EFilterType.perfume:\n      return colourTints.perfumeImgData(imageData)\n    case EFilterType.serenity:\n      return colourTints.serenityImgData(imageData)\n    case EFilterType.warmth:\n      return colourTints.warmth(imageData)\n    case EFilterType.neue:\n      return colourTints.neueImgData(imageData)\n    case EFilterType.sunset:\n      return  colourTints.sunset(imageData)\n    case EFilterType.wood:\n      return  colourTints.wood(imageData)\n    case EFilterType.lix:\n      return colourTints.lixConv(imageData)\n    case EFilterType.ryo:\n      return colourTints.ryoConv(imageData)\n    case EFilterType.bluescale:\n      return colourTints.blueGreyscaleImgData(imageData)\n    case EFilterType.solange:\n      return colourTints.solangeImgData(imageData)\n    case EFilterType.evening:\n      return colourTints.eveningImgData(imageData)\n    case EFilterType.crimson:\n      return colourTints.crimson(imageData)\n    case EFilterType.coral:\n      return colourTints.coralImgData(imageData)\n    case EFilterType.pinkAura:\n      return colourTints.pinkAuraImgData(imageData)\n    case EFilterType.haze:\n      return colourTints.hazeImgData(imageData)\n    case EFilterType.coolTwilight:\n      return colourTints.coolTwilightImgData(imageData)\n    case EFilterType.blues:\n      return colourTints.bluesImgData(imageData)\n    case EFilterType.horizon:\n      return colourTints.horizonImgData(imageData)\n    case EFilterType.mellow:\n      return colourTints.mellowImgData(imageData)\n    case EFilterType.solangeDark:\n      return colourTints.solangeDarkImgData(imageData)\n    case EFilterType.solangeGrey:\n      return colourTints.solangeGreyImgData(imageData)\n    case EFilterType.zapt:\n      return colourTints.zaptImgData(imageData)\n    case EFilterType.eon:\n      return colourTints.eonImgData(imageData)\n    case EFilterType.aeon:\n      return colourTints.aeonImgData(imageData)\n    case EFilterType.phase:\n      return colourTints.phase(imageData)\n    case EFilterType.lemon:\n      return colourTints.lemonImgData(imageData)\n    case EFilterType.frontward:\n      return colourTints.frontwardImgData(imageData)\n    case EFilterType.purplescale:\n      return colourTints.purplescaleImgData(imageData)\n    case EFilterType.radio:\n      return colourTints.radioImgData(imageData)\n    case EFilterType.twenties:\n      return colourTints.twentiesImgData(imageData)\n    case EFilterType.greyscale:\n      return colourTints.greyscaleImgData(imageData)\n    case EFilterType.grime:\n      return colourTints.grime(imageData)\n    case EFilterType.redgreyscale:\n      return colourTints.redgreyscaleImgData(imageData)\n    case EFilterType.greengreyscale:\n      return colourTints.greengreyscaleImgData(imageData)\n    case EFilterType.rosetint:\n      return  colourTints.rosetintImgData(imageData)\n    case EFilterType.greenDiagonalLines:\n      return lineGen.addGreenDiagonalLinesImgData(imageData)\n    case EFilterType.diagonalLines:\n      return lineGen.addDiagonalLinesImgData(imageData)\n    case EFilterType.horizontalLines:\n      return lineGen.addHorizontalLineImgData(imageData)\n    case EFilterType.extremeOffsetBlue:\n      return offsets.extremeOffsetBlue(imageData)\n    case EFilterType.extremeOffsetGreen:\n      return offsets.extremeOffsetGreen(imageData)\n    case EFilterType.offsetGreen:\n      return offsets.offsetGreenImgData(imageData)\n    case EFilterType.extraOffsetBlue:\n      return offsets.extraOffsetBlue(imageData)\n    case EFilterType.extraOffsetRed:\n      return offsets.extraOffsetRed(imageData)\n    case EFilterType.extraOffsetGreen:\n      return offsets.extraOffsetGreen(imageData)\n    case EFilterType.offset:\n      return offsets.offset(imageData)\n    case EFilterType.offsetBlue:\n      return offsets.offsetBlueImgData(imageData)\n    case EFilterType.extremeOffsetRed:\n      return offsets.extremeOffsetRed(imageData)\n    case EFilterType.tealMinNoise:\n      return noiseGen.tealMinNoiseImgData(imageData)\n    case EFilterType.darkPurpleMinNoise:\n      return noiseGen.darkPurpleMinNoiseImgData(imageData)\n    case EFilterType.pinkMinNoise:\n      return  noiseGen.pinkMinNoiseImgData(imageData)\n    case EFilterType.matrix:\n      return  noiseGen.matrixImgData(imageData)\n    case EFilterType.cosmic:\n      return  noiseGen.cosmicImgData(imageData)\n    case EFilterType.minNoise:\n      return  noiseGen.minNoiseImgData(imageData)\n    case EFilterType.redMinNoise:\n      return  noiseGen.redMinNoiseImgData(imageData)\n    case EFilterType.matrix2:\n      return  noiseGen.matrix2(imageData)\n    case EFilterType.greenMedNoise:\n      return  noiseGen.greenmedNoiseImgData(imageData)\n    case EFilterType.greenMinNoise:\n      return  noiseGen.greenMinNoiseImgData(imageData)\n    case EFilterType.blueMinNoise:\n      return  noiseGen.blueMinNoiseImgData(imageData)\n    case EFilterType.purpleMinNoise:\n      return  noiseGen.purpleMinNoiseImgData(imageData)\n    case EFilterType.retroviolet:\n      return   specksGen.retrovioletImgData(imageData)\n    case EFilterType.yellowCasino:\n      return  specksGen.yellowCasinoImgData(imageData)\n    case EFilterType.specks:\n      return  specksGen.specksImgData(imageData)\n    case EFilterType.specksRedscale:\n      return  specksGen.specksredscaleImgData(imageData)\n    case EFilterType.eclectic:\n      return  specksGen.eclecticImgData(imageData)\n    case EFilterType.greenSpecks:\n      return  specksGen.greenSpecksImgData(imageData)\n    case EFilterType.casino:\n      return  specksGen.casinoImgData(imageData)\n  }\n}\n\nexport const FilterCatalog = {\n  brightnessAdj:[\n    EFilterType.a,                  // brightnessAdj.a\n    EFilterType.darkify,            // brightnessAdj.darkifyImgData\n    EFilterType.incbrightness,      // brightnessAdj.incbrightnessImgData\n    EFilterType.incbrightness2,     // brightnessAdj.incbrightnessTwoImgData\n    EFilterType.invert,             // brightnessAdj.invertImgData\n    EFilterType.pixelBlue,          // brightnessAdj.pixelBlueImgData\n    EFilterType.satAdj,             // brightnessAdj.satAdjImgData\n  ],\n  colourTints:[\n    EFilterType.ocean,              // colourTints.oceanImgData\n    EFilterType.vintage,            // colourTints.vintageImgData\n    EFilterType.perfume,            // colourTints.perfumeImgData\n    EFilterType.serenity,           // colourTints.serenityImgData\n    EFilterType.warmth,             // colourTints.warmth\n    EFilterType.neue,               // colourTints.neueImgData\n    EFilterType.sunset,             // colourTints.sunset\n    EFilterType.wood,               // colourTints.wood\n    EFilterType.lix,                // colourTints.lixConv\n    EFilterType.ryo,                // colourTints.ryoConv\n    EFilterType.bluescale,          // colourTints.blueGreyscaleImgData\n    EFilterType.solange,            // colourTints.solangeImgData\n    EFilterType.evening,            // colourTints.eveningImgData\n    EFilterType.crimson,            // colourTints.crimson\n    EFilterType.coral,              // colourTints.coralImgData\n    EFilterType.pinkAura,           // colourTints.pinkAuraImgData\n    EFilterType.haze,               // colourTints.hazeImgData\n    EFilterType.coolTwilight,       // colourTints.coolTwilightImgData\n    EFilterType.blues,              // colourTints.bluesImgData\n    EFilterType.horizon,            // colourTints.horizonImgData\n    EFilterType.mellow,             // colourTints.mellowImgData\n    EFilterType.solangeDark,        // colourTints.solangeDarkImgData\n    EFilterType.solangeGrey,        // colourTints.solangeGreyImgData\n    EFilterType.zapt,               // colourTints.zaptImgData\n    EFilterType.eon,                // colourTints.eonImgData\n    EFilterType.aeon,               // colourTints.aeonImgData\n    EFilterType.phase,              // colourTints.phase\n    EFilterType.lemon,              // colourTints.lemonImgData\n    EFilterType.frontward,          // colourTints.frontwardImgData\n    EFilterType.purplescale,        // colourTints.purplescaleImgData\n    EFilterType.radio,              // colourTints.radioImgData\n    EFilterType.twenties,           // colourTints.twentiesImgData\n    EFilterType.greyscale,          // colourTints.greyscaleImgData\n    EFilterType.grime,              // colourTints.grime\n    EFilterType.redgreyscale,       // colourTints.redgreyscaleImgData\n    EFilterType.greengreyscale,     // colourTints.greengreyscaleImgData\n    EFilterType.rosetint,           // colourTints.rosetintImgData\n  ],\n  lineGen:[\n    EFilterType.greenDiagonalLines, // lineGen.addGreenDiagonalLinesImgData\n    EFilterType.diagonalLines,      // lineGen.addDiagonalLinesImgData\n    EFilterType.horizontalLines,    // lineGen.addHorizontalLineImgData    \n  ],\n  offsets:[\n    EFilterType.extremeOffsetBlue,  // offsets.extremeOffsetBlue\n    EFilterType.extremeOffsetGreen, // offsets.extremeOffsetGreen\n    EFilterType.offsetGreen,        // offsets.offsetGreenImgData\n    EFilterType.extraOffsetBlue,    // offsets.extraOffsetBlue\n    EFilterType.extraOffsetRed,     // offsets.extraOffsetRed\n    EFilterType.extraOffsetGreen,   // offsets.extraOffsetGreen\n    EFilterType.offset,             // offsets.offset\n    EFilterType.offsetBlue,         // offsets.offsetBlueImgData\n    EFilterType.extremeOffsetRed,   // offsets.extremeOffsetRed\n  ],\n  noiseGen:[\n    EFilterType.tealMinNoise,       // noiseGen.tealMinNoiseImgData\n    EFilterType.darkPurpleMinNoise, // noiseGen.darkPurpleMinNoiseImgData\n    EFilterType.pinkMinNoise,       // noiseGen.pinkMinNoiseImgData\n    EFilterType.matrix,             // noiseGen.matrixImgData\n    EFilterType.cosmic,             // noiseGen.cosmicImgData\n    EFilterType.minNoise,           // noiseGen.minNoiseImgData\n    EFilterType.redMinNoise,        // noiseGen.redMinNoiseImgData\n    EFilterType.matrix2,            // noiseGen.matrix2\n    EFilterType.greenMedNoise,      // noiseGen.greenMedNoiseImgData\n    EFilterType.greenMinNoise,      // noiseGen.greenMinNoiseImgData\n    EFilterType.blueMinNoise,       // noiseGen.blueMinNoiseImgData\n    EFilterType.purpleMinNoise,     // noiseGen.purpleMinNoiseImgData\n  ],\n  specksGen:[\n    EFilterType.retroviolet,        // specksGen.retrovioletImgData\n    EFilterType.yellowCasino,       // specksGen.yellowCasinoImgData\n    EFilterType.specks,             // specksGen.specksImgData\n    EFilterType.specksRedscale,     // specksGen.specksredscaleImgData\n    EFilterType.eclectic,           // specksGen.eclecticImgData\n    EFilterType.greenSpecks,        // specksGen.greenSpecksImgData\n    EFilterType.casino,             // specksGen.casinoImgData\n  ],\n}\n","\nconst extremeOffsetBlue = (imgData: ImageData) => {\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const offset = 35\n    imgData.data[i + 2] =\n      imgData.data[i + 4 * offset * offset] === undefined\n        ? 0\n        : imgData.data[i + 4 * offset]\n  }\n  return imgData\n}\n\nconst extraOffsetBlue = (imgData: ImageData) => {\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const offset = 15\n    imgData.data[i + 2] =\n      imgData.data[i + 4 * offset * offset] === undefined\n        ? 0\n        : imgData.data[i + 4 * offset]\n  }\n  return imgData\n}\n\nconst extremeOffsetGreen = (imgData: ImageData) => {\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const offset = 35\n    imgData.data[i + 1] =\n      imgData.data[i + 4 * offset * offset] === undefined\n        ? 0\n        : imgData.data[i + 4 * offset]\n  }\n  return imgData\n}\n\nconst extraOffsetGreen = (imgData: ImageData) => {\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const offset = 15\n    imgData.data[i + 1] =\n      imgData.data[i + 4 * offset * offset] === undefined\n        ? 0\n        : imgData.data[i + 4 * offset]\n  }\n  return imgData\n}\n\nconst extremeOffsetRed = (imgData: ImageData) => {\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const offset = 35\n    imgData.data[i] =\n      imgData.data[i + 4 * offset * offset] === undefined\n        ? 0\n        : imgData.data[i + 4 * offset]\n  }\n  return imgData\n}\n\nconst extraOffsetRed = (imgData: ImageData) => {\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const offset = 15\n    imgData.data[i] =\n      imgData.data[i + 4 * offset * offset] === undefined\n        ? 0\n        : imgData.data[i + 4 * offset]\n  }\n  return imgData\n}\n\nconst offset = (imgData: ImageData) => {\n  console.log('offset called')\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const offset = 5\n    imgData.data[i] =\n      imgData.data[i + 4 * offset * offset] === undefined\n        ? 0\n        : imgData.data[i + 4 * offset]\n  }\n  return imgData\n}\n\nconst offsetGreenImgData = (imgData: ImageData) => {\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const offset = 5\n    imgData.data[i + 1] =\n      imgData.data[i + 4 * offset * offset] === undefined\n        ? 0\n        : imgData.data[i + 4 * offset]\n  }\n  return imgData\n}\n\nconst offsetBlueImgData = (imgData: ImageData) => {\n  for (let i = 0; i < imgData.data.length; i += 4) {\n    const offset = 5\n    imgData.data[i + 2] =\n      imgData.data[i + 4 * offset * offset] === undefined\n        ? 0\n        : imgData.data[i + 4 * offset]\n  }\n  return imgData\n}\n\nexport {\n  offset,\n  extraOffsetBlue,\n  extraOffsetGreen,\n  extraOffsetRed,\n  extremeOffsetBlue,\n  extremeOffsetGreen,\n  extremeOffsetRed,\n  offsetGreenImgData,\n  offsetBlueImgData\n}\n","import { applyFilter, EFilterType, FilterCatalog } from './filters'\nexport const filterType = EFilterType\nexport const filterCatalog = FilterCatalog\n\nexport function filterImageData (userImgData: ImageData, filter: EFilterType | number): ImageData | null {\n  const newimgData = applyFilter(filter, userImgData)\n  return newimgData\n}\n\nexport function filterImagePath (path: string, filter: EFilterType | number): Promise<string | null> {\n\n  return new Promise((resolve, reject) => {\n    const image = new Image()\n    image.src = path\n \n    image.onload = () => {\n      resolve(filterImageElement(image,filter))\n    }\n    image.onerror = () => {\n      reject(null)\n    }\n  })\n}\n\nexport function filterImageElement (userImgElement: HTMLImageElement, filter: EFilterType): string | null{\n  const imgData = imageElementToCanvas(userImgElement)\n  if(imgData == null) {\n    return null\n  }\n  const newImgData = applyFilter(filter, imgData)\n  const canvas = document.createElement('canvas')\n  canvas.width = newImgData.width\n  canvas.height = newImgData.height\n  const ctx: CanvasRenderingContext2D | null = canvas.getContext('2d') \n  if(ctx == null) {\n    return null\n  }\n  ctx.putImageData(newImgData, 0, 0)\n  return canvas.toDataURL()\n}\n\nexport function imageElementToCanvas (img:HTMLImageElement):ImageData | null{\n  const canvas = document.createElement('canvas')\n  canvas.width = img.width\n  canvas.height = img.height\n  const ctx:CanvasRenderingContext2D | null= canvas.getContext('2d')\n  if(ctx) {\n    ctx.drawImage(img, 0, 0)\n    // dataURL を取得\n    canvas.toDataURL('image/png')\n    // blob を取得\n    canvas.toBlob((b) => { return b }, 'image/jpeg', 1.0)\n    return ctx.getImageData(0, 0, img.width, img.height)\n  } else {\n    return null\n  }\n}\nexport function getFilterTypes(): string[] {\n  const results = []\n  for (const type of enumKeys(EFilterType)) {\n  results.push(type)\n  }\n  return results\n}\n\nfunction enumKeys<O extends object, K extends keyof O = keyof O>(obj: O): K[] {\n  return Object.keys(obj).filter(k => Number.isNaN(+k)) as K[];\n}\n","export function UnduplicateRandom(min:number, max:number, count:number = 0):number[] {\n    const randoms: number[] = [];\n    if(count === 0) count = max;\n    for(let i = min; i <= count; i++){\n        while(true){\n            var tmp = RandomRange(min, max);\n            if(!randoms.includes(tmp)){\n            randoms.push(tmp);\n            break;\n            }\n        }\n    }\n    return randoms\n}\nexport function RandomRange(min:number, max:number):number{\n  return Math.floor( Math.random() * (max - min + 1)) + min;\n}","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport {filterImagePath,  getFilterTypes} from './library/imageFilter'\nimport { UnduplicateRandom } from './library/imageFilter/Math/Ramdom';\n\nfunction App() {\n  const [paths, setPaths] = useState<string[]>([])\n  const [filterdImagePaths, setFilterdImagePaths] = useState<Array<string | null>>([])\n  const filters = getFilterTypes();\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  useEffect(() => {\n    const imageNum: number[] = UnduplicateRandom(1,49, 4)\n    setPaths(imageNum.map((num) => {\n      return `images/${String(num).padStart(3, \"0\")}.jpg`\n    }))\n    initialImage()\n  },[]) \n\n  const initialImage = () => {\n    const newImagePath = []\n    for(let path of paths) {\n      newImagePath.push(`${path}`);\n    }\n    setFilterdImagePaths(newImagePath)\n  }\n\n  const applyFilter = async  (value: number) => {\n    const newImagePath = []\n    setIsLoading(true)\n    if(value > -1 ) {\n      for(let path of paths) {\n        const newPath = await filterImagePath(`${path}`,value)\n        newImagePath.push(newPath);\n      }\n      setFilterdImagePaths(newImagePath)\n    } else {\n      initialImage()\n    }\n    setIsLoading(false)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <main>\n        <select className=\"filterSelect\" placeholder=\"フィルターを選択してください\" onChange={(event) => {\n          applyFilter(parseInt(event.target.value))\n        }}>\n            <option value={-1}>\n              Original\n            </option>\n          {\n            filters.map((value, index) => {\n              return (\n                <option value={index}>\n                  {value} \n                </option>\n              )\n            })\n          }\n        </select>\n        <div className=\"imageContainer\">\n        {\n          paths.map((imagePath) => {\n              return(\n                <div className=\"item\">\n                  <img src={`${imagePath}`} alt={imagePath}/>\n                </div>\n              )\n          })\n        }\n        </div>\n        <div className=\"imageContainer\">\n        {\n          filterdImagePaths.map(imagePath => {\n            if(imagePath) {\n              return(\n                <div className={\"item \" + (isLoading ? \"loading\": \"\")}>\n                  <img src={imagePath} alt={imagePath}/>\n                </div>\n              )\n\n            }\n          })\n        }\n        </div>\n        <section>\n\n        </section>\n      </main>\n  </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}